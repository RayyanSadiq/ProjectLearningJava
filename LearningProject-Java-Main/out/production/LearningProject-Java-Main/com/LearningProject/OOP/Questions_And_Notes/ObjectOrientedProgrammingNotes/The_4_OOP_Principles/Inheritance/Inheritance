Inheritance is an important pillar of com.LearningProject.OOP(Object-Oriented Programming). It is the mechanism in java by which one class
is allowed to inherit the features(fields and methods) of another class. Go to the Inheritance directory to learn more

--------------------------------------------Important terminology-------------------------------------------------------

Super Class: The class whose features are inherited is known as a superclass(or a base class or a parent class).
Synonyms for super class are:

- base
- super
- parent
- class that's being inherited from


Sub Class: The class that inherits the other class is known as a subclass(or a derived class, extended class,
synonyms for descendant classes are:

- child
- sub
- descendant
- offspring
- class that is inheriting from

The subclass can add its own fields and methods in addition to the superclass fields and methods(that are public).

------------------------------------------------------------------------------------------------------------------------
Important facts about inheritance in Java


Default superclass: Except Object class, which has no superclass, every class has one and only one direct superclass
(single inheritance). In the absence of any other explicit superclass, every class is implicitly a subclass of the
Object class.

Superclass can only be one: A superclass can have any number of subclasses. But a subclass can have only one superclass.
This is because Java does not support multiple inheritances with classes.

Inheriting Constructors: A subclass inherits all the members (fields, methods, and nested classes) from its superclass.
Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be
invoked from the subclass.

Private member inheritance: A subclass does not inherit the private members of its parent class. However, if the
superclass has public or protected methods(like getters and setters) for accessing its private fields, these can also
be used by the subclass.

-----------------------------------------------Inheritance Rules--------------------------------------------------------
What You Can Do in a Subclass
A subclass inherits all of the public and protected members of its parent, no matter what package the subclass is in.
If the subclass is in the same package as its parent, it also inherits the package-private members of the parent.
You can use the inherited members as is, replace them, hide them, or supplement them with new members:

->The inherited fields can be used directly, just like any other fields.
->You can declare a field in the subclass with the same name as the one in the superclass, thus hiding it (not recommended).
->You can declare new fields in the subclass that are not in the superclass.
->The inherited methods can be used directly as they are.
->You can write a new instance method in the subclass that has the same signature as the one in the superclass, thus overriding it.
->You can write a new static method in the subclass that has the same signature as the one in the superclass, thus hiding it.
->You can declare new methods in the subclass that are not in the superclass.
->You can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword super.
->The following sections in this lesson will expand on these topics.

Private Members in a Superclass
A subclass does not inherit the private members of its parent class. However, if the superclass has public or protected
methods for accessing its private fields, these can also be used by the subclass.


-----------------------------------------------Inheritance for Beginners------------------------------------------------

Some things about Inheritance that a beginner or someone should never do is create deep inheritance hierarchies, it's
best to make up to two to three levels of hierarchies, otherwise it may be too excessive. Inheritance hierarchies are
tightly coupled together, so changing a super class, will affect all the descendant classes and that may even affect
their descendants if they have any, so avoiding making too many levels of Inheritance will prevent your hierarchies from
becoming a pain to fix or adjust.

Java does not support multiple Inheritance because their is something called the diamond problem, which is basically
when a child class has two or more parents which have the same methods, but which version of the methods get passed on
to the child? Java opted out of this concept due to the problems that arise.

Beginners only know simple Inheritance and not any other complex design pattern to implement Inheritance.
An example of this is in the Inheritance_And_Polymorphism sub-directories called:
- part1
- part2

refer to these for basic beginner level inheritance.
------------------------------------------------------------------------------------------------------------------------