------------------------------------------------Avoiding Coupling-------------------------------------------------------

coupling is the process in which if one thing is changed, the other thing related to that thing may also have to be
changed. For example we have class A, it is using Class B, in other words it is coupled or depending upon Class B. If we
change Class B, Class A may have to be modified or at least recompiled, and the same goes for other classes dependent on
Class A. We don't want to change one class and end up with 100 broken classes, that's the problem with coupling, the
more our classes are coupled, the more costly changing is going to be. This is why we want to reduce coupling as much
as we can.

----------------------------------------------------Interfaces----------------------------------------------------------

We use interfaces to build loosely coupled, extensible,and testable applications. Think of a car, when a wheel has a
problem we only want to change the wheel, not the whole car, this is interfaces in action. Interfaces are between two
classes, and they completely decouple the classes.

An Interface is a type that only has method declarations, no implementations, it has no code, it only define the
capabilities a class should have. For example we have a chef, you don't care who the chef is as long as it has certain
capabilities, this is loose coupling in action. If our chef leaves or doesn't work that day, we can use a different chef
with the same capabilities.

We don't want class A to be directly coupled with Class B at all, because if we change B, Class A might be affected. So
to minimize the impact of changes, we put an interface in between these two classes and decouple them. If we change
anything in Class B, Class A will not be affected, because it knows nothing about B. This term is what we call -
"Programming against interfaces". We code our classes to work with interfaces not concrete implementation like classes.
This makes our application more extensible and testable.

classes - how it should be done
interfaces - what should be done

------------------------------------------------Dependency Injection----------------------------------------------------

What is meant by the word "Dependency" is that a Java class has a dependency on another class, if it uses an instance
of this class. This means we should apply this concept and interfaces to anytime we make another class use another
instance of a class to decouple our code and program.

According to the dependency Injection concept our classes should not instantiate their dependencies