------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
4 main principles of com.Droid7X.OOP

The four principles of object-oriented programming are:

- Encapsulation: bundling the data and operations on the data inside a single unit (class).

- Abstraction: reducing complexity by hiding unnecessary details (metaphor: the implementation detail of a remote
  control is hidden from us. We only work with its public interface.)

- Inheritance: a mechanism for reusing code.

- Polymorphism: a mechanism that allows an object to take many forms and behave differently. This will help us build
  extensible applications
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
ENCAPSULATION

Encapsulation is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code
and the data it manipulates. Another way to think about encapsulation is, that it is a protective shield that prevents
the data from being accessed by the code outside this shield.

Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only
through any member function of its own class in which it is declared. As in encapsulation, the data in a class is hidden
from other classes using the data hiding concept which is achieved by making the members or methods of a class private,
and the class is exposed to the end-user or the world without providing any details behind implementation using the
abstraction concept, so it is also known as a combination of data-hiding and abstraction. Encapsulation can be achieved
by Declaring all the variables in the class as private and writing public methods in the class to set and get the
values of variables. It is more defined with the setter and getter method.


Advantages of Encapsulation:

Data Hiding: it is a way of restricting the access of our data members by hiding the implementation details.
Encapsulation also provides a way for data hiding. The user will have no idea about the inner implementation of the
class. It will not be visible to the user how the class is storing values in the variables. The user will only know that
we are passing the values to a setter method and variables are getting initialized with that value.

Increased Flexibility: We can make the variables of the class read-only or write-only depending on our requirement. If
we wish to make the variables read-only then we have to omit the setter methods like setName(), setAge(), etc. from the
above program or if we wish to make the variables write-only then we have to omit the get methods like getName(),
getAge(), etc. from the above program.

Reusability: Encapsulation also improves the re-usability and is easy to change with new requirements.
Testing code is easy: Encapsulated code is easy to test for unit testing.
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
ABSTRACTION

Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or
the non-essential units are not displayed to the user. Ex: A car is viewed as a car rather than its individual
components.

Data Abstraction may also be defined as the process of identifying only the required characteristics of an object
ignoring the irrelevant details. The properties and behaviors of an object differentiate it from other objects of
similar type and also help in classifying/grouping the objects.

Consider a real-life example of a man driving a car. The man only knows that pressing the accelerators will increase the
speed of a car or applying brakes will stop the car, but he does not know how on pressing the accelerator the speed is
actually increasing, he does not know about the inner mechanism of the car or the implementation of the accelerator,
brakes, etc in the car. This is what abstraction is.

In java, abstraction is achieved by interfaces and abstract classes. We can achieve 100% abstraction using interfaces.
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
INHERITANCE

Inheritance is an important pillar of com.Droid7X.OOP(Object-Oriented Programming). It is the mechanism in java by which one class
is allowed to inherit the features(fields and methods) of another class. Go to the Inheritance directory to learn more

Reusability: Inheritance supports the concept of “reusability”, i.e. when we want to create a new class and there is
already a class that includes some of the code that we want, we can derive our new class from the existing class. By
doing this, we are reusing the fields and methods of the existing class.
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
POLYMORPHISM

The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message
to be displayed in more than one form.

Real-life Illustration: Polymorphism

A person at the same time can have different characteristics. Like a man at the same time is a father, a husband, an
employee. So the same person possesses different behavior in different situations. This is called polymorphism.
Polymorphism is considered one of the important features of Object-Oriented Programming. Polymorphism allows us to
perform a single action in different ways. In other words, polymorphism allows you to define one interface and have
multiple implementations. The word “poly” means many and “morphs” means forms, So it means many forms.

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------